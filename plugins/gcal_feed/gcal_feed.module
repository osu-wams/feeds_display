<?php
/**
 * @file gcal_feed.module
 *  Provides a custom parser for the Live Feeds module
 *  to parse Atom XML from a Google Calendar
 *
 */


 /**
  * @returns
  *   A configuration array for this parser
  */
 function gcal_feed_config() {
   $feed_config = array(
    'feed_type'   => 'gcal_feed',
    'feed_title'  => 'Google Calendar Feed',
    'feed_url'    => 'http://www.google.com/calendar/feeds/liebermp%40onid.oregonstate.edu/public/full',
//    'feed_url'    => 'http://www.google.com/calendar/feeds/liebermp%40onid.oregonstate.edu/public/basic',
  );
  return $feed_config;
}

/**
 * Implementation of hook_form_alter
 *
 */
/*
function gcal_feed_form_not_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'feed_node_form') {

    drupal_add_js( drupal_get_path('module', 'gcal_feed') . '/gcal_feed.js');

    $form['live_feeds_form']['date_style'] = array(
      '#type'          => 'select',
      '#title'         => t('The style of the date in event items'),
      '#description'   => t('Select the classic OSU Standard style, or the new Calendar style.'),
      '#options'       => array( 'classic' => 'Classic', 'calendar' => 'Calendar'),
		  '#default_value' => variable_get('gcal_feed_date_style', 'classic'),
    );
  }
}
*/

/**
 * Implementation of hook_nodeapi
 *
 * We have to save the extra fields for this module.
 */
/*
function gcal_feed_nodeapi(&$node, $op) {
  if ($node->type == 'feed' && $node->feed_type == 'gcal_feed' ) {
    if ($op == 'insert' || $op == 'update') {

        variable_set('gcal_feed_date_style', $node->date_style);

     }
  }
}
*/

 /**
 * Parse the RSS and display the feed
 *
 * @param $feed_url
 *  A string containing he URL of the feed
 * @param $num_items
 *  An integer containing the number of items to display
 *
 * @return
 *  A string with the formated HTML to display
 *
 * @todo It might be possible to use a .tpl template instead
 *       of hard coding all of the HTML in the function.
 */
function gcal_feed_live_feeds_parser($feed_url, $num_items) {

  // Get today's date
  $today_mon = date('m',time());
  $today_day = date('d',time());
  $today_year = date('Y',time());

  // Set the start date for items to retrieve
  // We could also set an end date with 'start-max'
  $feed_url .= "?start-min=$today_year-$today_mon-$today_day";

// Use cURL to get the file
  $proxy = 'proxy.oregonstate.edu:3128';
  $ch = curl_init();
  $timeout = 0;
  curl_setopt ($ch, CURLOPT_URL, $feed_url);
  curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt ($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
  curl_setopt($ch, CURLOPT_PROXY, $proxy);
  $file_contents = curl_exec($ch);
  curl_close($ch);

  // Now parse it as XML
  $xml = simplexml_load_string($file_contents);
  $items   = 0;

  //$date_style =  variable_get('gcal_feed_date_style', 'calendar');

  // Parse the feed_url to determine the calendar link
  $cal_link = $xml->id;

  // We have to save each entry to an array
  // so that we can sort it by date before printing
  $events = array();

  foreach ($xml->entry as $entry) {
    if (++$items > $num_items) break;
    // Get the event data
    $title = $entry->title;
    $desc  = $entry->content->__toString();

    // Get the first gd:wen node and it's startTime attribute
    $gdnode = $entry->xpath('./gd:when');
    $sdate = $gdnode[0]->attributes()->startTime->__toString();

    // Parse the date
    $date  = strtotime($sdate);
    $day   = date('d', $date);
    $mon   = date('m', $date);
    $month = date('M', $date);
    $year  = date('Y', $date);
    $spell_mon = date('F', $date);

    // Get the location
    $lnode = $entry->xpath('./gd:where');
    $location = $lnode[0]->attributes()->valueString->__toString();

    // Get the content
    $text = $entry->content->__toString();
    $text = str_replace('When: ', '', $text);

    // Build output string
    $content = '<div class="calendar-item">';
    $content .= '<div class="date calendar">';
    $content .= '<div class="month"><abbr title="'. $spell_mon .'">';
    $content .= $month;
    $content .= '</abbr></div><div class="day-year"><div class="day">';
    $content .= $day;
    $content .= '</div><div class="year">';
    $content .= $year;
    $content .= '</div></div></div>';

    $content .= '<div class="description">';
    $content .= '<p class="title"><strong>' . $title . '</strong></p>';
    $content .= '<p><strong>' . $location . '</strong></p>';
    $content .= '<p>' . $text . '</p>';
    $content .= '</div></div>';

    // Add it to the array
    $events[] = array('date' => $date , 'content' => $content);

  }

  // Sort the array using our function below
  usort($events, 'dsort');

  // Build up the single content string to return
  $content = '';
  foreach ($events as $event) {
    $content .= $event['content'];
  }

  return $content;

}

/**
 * Callback function to sort an array
 * by a 'date' element
 */
function dsort($a, $b) {
  return ($a['date'] < $b['date']) ? -1 : 1;
}



<?php
/**
 * @file
 * live_feeds.module
 *
 * Created:    4/27/2011
 * Author(s):  Paul Lieberman - Central Web Services - Oregon State University
 *
 * Purpose:   A Drupal module to process custom feeds based on installed parsers
 *
 * Modified:
 *
 * @todo:
 *    Add hook_load and hook_view
 *
 */


/**
 * Implements hook_init()
*/
function live_feeds_init() {

  // Add CSS and Javascript for top-level module
  drupal_add_css( drupal_get_path('module', 'live_feeds') . '/live_feeds.css');
  drupal_add_js( drupal_get_path('module', 'live_feeds') . '/live_feeds.js');

  // Get the parsers and add them to the Javascript settings array
  $parsers = live_feeds_get_available_parsers();
  drupal_add_js(array('live_feeds' => $parsers), 'setting');

  // Add CSS for each parser
  foreach ($parsers as $module => $values) {
    drupal_add_css( drupal_get_path('module', $module) . '/' . $module . '.css');
  }
}


/**
 * Implements hook_node_info()
 */
function live_feeds_node_info() {
  return array(
    'feed'        => array(
      'name'        => t('Feed'),
      'module'      => 'live_feeds',
      'base'        => 'live_feeds',
      'description' => t("A Feed is a summary of items or events from another source."),
      'help'        => 'Create a feed.',
      'title_label' => 'Feed',
      'has_body'    => false,
    )
  );
}

/**
 * Impelements hook_help()
 */
function live_feeds_help($path, $arg){
  switch($path) {
    case 'node/add#feed':
      return t('A Feed. Use this page to add a feed.');
    case 'admin/help#feed':
      return t('<p>A module for creating and viewing feeds.</p>');
  }
}


/**
 * Implements hook_perm()
 */
function live_feeds_permission(){
  return array('create feed' => array(
        'title' => t('Create a new feed.'),
        ), 
      'edit feed'   => array(
        'title' => t('Edit an existing feed'),
        )
      );
}


/**
 * Implementation of hook_menu()
 *
 * Add a link to the Site Configuration menu
 */
function live_feeds_menu() {

  $items = array();

  $items['admin/config/content/live_feeds'] = array(
    'title'            => 'Live Feeds',
    'description'      => 'Manage settings for Live Feeds',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('live_feeds_admin'),
    'access arguments' => array('access administration pages'),
    'type'             => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Admin settings page
 *
 */
function live_feeds_admin() {

  $form['live_feeds_admin'] = array(
    '#type'   => 'markup',
    '#title'  => t('Live Feeds settings'),
    '#markup' => t('<p>There are no configuration options available at this time.</p>'),
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_form()
 *
 */
function live_feeds_form(&$node, &$form_state) {

  // Get the list of available parser plugins
  $parsers = live_feeds_get_available_parsers();
  if (!$parsers) {
    drupal_set_message(t('No available parsers'));
  }
  $options = array('select' => 'Select feed type');
  foreach ($parsers as $parser => $info) {
    $options[$parser] = $info['name'];
  }

  $from = array();

  // The feed type - based on available parsers
  $form['live_feeds_form']['feed_type'] = array(
    '#type'          => 'select',
    '#title'         => t('The type of feed'),
    '#description'   => t('Select which type of feed you want to configure.'),
    '#options'       => $options,
		'#default_value' => isset($node->feed_type) ? $node->feed_type : '',
  );

  // The block title
  $form['live_feeds_form']['title'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Block Title'),
    '#description'   => t('This is name you will see in the Blocks list'),
    '#required'      => TRUE,
		'#default_value' => $node->title,
  );

  // The feed URL
  $form['live_feeds_form']['feed_url'] = array(
    '#type'          => 'textfield',
    '#title'         => t('URL of your feed'),
    '#description'   => t('This is the URL of your feed. It will normally be an .rss or .xml file'),
    '#required'      => TRUE,
		'#default_value' => isset($node->feed_url) ? $node->feed_url: '',
  );

  // Number of items to display
  $form['live_feeds_form']['num_items'] = array(
    '#type'   => 'textfield',
    '#title'  => t('Number of items to display'),
    '#default_value' => 5, //$feed->num_items ? $feed->num_items : '5',
    '#description' => t('Please enter the number of items you want displayed'),
    '#required' => TRUE,
  );

  $form['live_feeds_form']['#submit'] = array('live_feeds_submit_handler');

  return $form;
}


/**
 * Implementation of hook_validate.
 *
 */
function live_feeds_validate($node) {
  if ( $node->feed_type == 'select') {
    form_set_error('', t('Please select a feed type'));
  }
  elseif ( ! preg_match("/^http/", $node->feed_url )) {
    form_set_error('live_feeds_form][feed_url', t('Please provide a valid feed URL'));
  }
}


/**
* Implementation of hook_form_alter().
*
*/
function live_feeds_form_alter(&$form, &$form_state, $form_id) {
}

/**
 * Implements hook_insert()
 */
function live_feeds_insert($node) {

  // Insert a record into our table
  $feed = array(
    'nid'        => $node->nid,
    'bid'        => 0,
    'feed_title' => $node->title,
    'feed_url'   => $node->feed_url,
    'feed_type'  => $node->feed_type,
    'num_items'  => $node->num_items,
  );

  drupal_write_record('live_feeds', $feed);
  drupal_set_message(t('Once your feed is created you can  go to the Blocks page and add the feed to a region in your theme.'));
}

/**
 * Implements hook_update()
 */
function live_feeds_update($node) {

	// Update a record in our table
  $feed = array(
    'nid'        => $node->nid,
    'feed_title' => $node->title,
    'feed_url'   => $node->feed_url,
    'feed_type'  => $node->feed_type,
    'num_items'  => $node->num_items,
  );
  drupal_write_record('live_feeds', $feed, 'nid');
}


/**
 * Implements hook_delete()
 */
function live_feeds_delete($node) {
  db_query('DELETE FROM {live_feeds} WHERE nid = %d', $node->nid);
}

/**
 * Implements hook_load()
 */
function live_feeds_load($nodes) {

  $nids = array_keys($nodes);
  $nid  = $nids[0];
  $node = $nodes[$nid];

  $result = db_query("SELECT feed_type, feed_url, num_items FROM {live_feeds} WHERE nid = :nid", array(':nid' => $nid));
  foreach ($result as $feed ) {
    $node->feed_url  = $feed->feed_url;
    $node->feed_type = $feed->feed_type;
    $node->num_items = $feed->num_items;
  }
}


/**
 * Implementation of hook_block().
 *
 * When Drupal is instaniated this hook will read the database and
 * create the blocks for each of our feeds.
 */
function live_feeds_block_info() {

  $blocks = array();

  // Read our feeds from the db
  // and create the block for each one
  $result = db_query("SELECT * FROM {live_feeds}");
  foreach ($result as $feed ) {
    $blocks[$feed->fid] = array(
          'info'        => t($feed->feed_title),
          'title'       => t($feed->feed_title),
          'visibility'  => 1,
          'pages'       => '<front>',
    );
  }
  return $blocks;
}

function live_feeds_block_view($delta = '') {

  // Read our feeds from the db
  $result = db_query("SELECT * from {live_feeds} where fid = :fid", array(':fid' => $delta));
  foreach ($result as $feed) {
    $content = load_feed($feed->feed_type, $feed->feed_url, $feed->num_items);
    $block = array(
        'subject'   =>  t($feed->feed_title),
        'content'   =>  array('#theme'   => 'live_feeds_block', '#content' => $content, '#link' => $feed->feed_url ),
        'link'      =>  $feed->feed_url,
    );
  }
  return $block;
}

/**
 * Calls the correct parser for this feed type
 *
 * @param $feed_type
 *  A string containing the feed type
 * @param $feed_url
 *  A string contianing the URL
 * @param $num_items
 *  An integer containing the number of items to display
 *
 */
function load_feed($feed_type, $feed_url, $num_items) {

  $parsers = live_feeds_get_available_parsers();
  if ($parsers[$feed_type]) {
    $func = $feed_type . '_live_feeds_parser';
    return $func($feed_url, $num_items);
  }
}

/**
 * Implementation of hook_theme
 *
 * Register our template
 *
 */
function live_feeds_theme() {
  $theme['live_feeds_block'] = array(
      'variables' => array('content' => NULL, 'link' => NULL),
      'template'  => 'live-feeds-block',
      'path'      => drupal_get_path('module', 'live_feeds') . '/templates',
  );
  return $theme;
}


/**
 * Return a list of available parsers.
 *
 * @return
 *   An array of the enabled feed parser modules. The module name is the key
 *   and the value is a sub-array with the module's 'name' and 'description'.
 */
function live_feeds_get_available_parsers() {
  static $parsers;

  if (!isset($parsers)) {
    $parsers = array();
    foreach (module_implements('live_feeds_parser', TRUE) as $module) {
      $info = drupal_parse_info_file(drupal_get_path('module', $module) .'/'. $module .'.info');
      $func = $module . '_config';
      $config = $func();

      $parsers[$module] = array(
        'name'        => $info['name'],
        'description' => $info['description'],
        'title'       => $config['feed_title'],
        'url'         => $config['feed_url'],
      );
    }
  }

  return $parsers;
}

/*
 * Function to truncate a string to given number of words.
 * Can be used by parser modules
 */ 
function live_feeds_truncate_words($string, $words){
  $string = explode(' ', $string);
  if (count($string) > $words) {
    return implode(' ', array_slice($string, 0, $words));
  }
  return implode(' ', $string);
}
